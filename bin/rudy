#!/usr/bin/env ruby


# = Rudy
#
# === Not your granparent's deployment tool
#
#   See rudy -h for usage
#

BASE_PATH = File.expand_path File.join(File.dirname(__FILE__), '..')
lib_dir = File.join(BASE_PATH, 'lib')
$:.unshift lib_dir

$:.unshift File.join(File.dirname(__FILE__), '..', '..', 'drydock', 'lib')

#$SAFE = 1   # require is unsafe in Ruby 1.9??

begin
  require 'drydock'
  require 'rudy'
  require 'rudy/cli'
rescue Interrupt
  exit
end

# Command-line interface for /bin/rudy
class RudyCLI < Rudy::CLI::Base

  debug :off

  default :machines       # when no command is provided
  trawler :passthrough    # unknown command names will forward here.

  # ------------------------------------------  RUDY GLOBALS  --------
  # ------------------------------------------------------------------

  global :e, :environment, String, "Connect to the specified environment (e.g. #{Rudy::DEFAULT[:environment]})"
  global :r, :role, String, "Connect to a machine with the specified role (e.g. #{Rudy::DEFAULT[:role]})"
  global :p, :position, String, "Position of the machine in its group"
  global :t, :testrun, "Test run. Don't execute action (PARTIALLY SUPPORTED)."
  global :P, :parallel, "Execute remote commands in parallel (PARTIALLY SUPPORTED)."
  global :F, :force, "Force an action despite warnings"
  global :N, :project, String, "Project name. Used in group and machine names."

  global :positions, Integer, "Override positions number for the current role"


  # ------------------------------------------  RUDY OBJECTS  --------
  # ------------------------------------------------------------------

  # about "View Machines"
  # usage "rudy"
  # usage "rudy machines"
  # usage "rudy machines -l"
  # usage "rudy machines -U"
  # usage "rudy machines -A [static ip address]"
  # usage "rudy machines -N"
  # usage "rudy machines -T"
  # usage "rudy machines -P"
  # usage "rudy machines -O"
  # action :T, :available, "Test availablity"
  # option :l, :all, "Display machines for all environments and roles"
  # command :machines => Rudy::CLI::Machines
  # command_alias :machines, :m

  # about "View Keypairs"
  # usage "rudy keypairs"
  # #usage "rudy keypairs -A"
  # usage "rudy keypairs -S"
  # action :A, :add, "Add a keypair"
  # action :S, :show, "Show a private key"
  # command :keypairs => Rudy::CLI::Keypairs
  # command_alias :keypairs, :k


  # -----------------------------------------  RUDY ROUTINES  --------
  # ------------------------------------------------------------------

  # about "View Routines"
  # usage "rudy routines"
  # usage "rudy routines -l"
  # option :l, :all, "Display routines for all environments and roles"
  # command :routines => Rudy::CLI::Routines
  # command_alias :routines, :r

  # A "do nothing" routine. Passthrough simply executes a routine
  # config block. Drydock's trawler uses this for unknown commands.
  # about "A passthrough for custom routines"
  # usage "rudy [custom-routine]"
  # option :m, :message, String, "A message"
  # command :passthrough => Rudy::CLI::Routines


  # ------------------------------------  RUDY MISCELLANEOUS  --------
  # ------------------------------------------------------------------

  about "Display existing environment objects"
  option :l, :all, "Include all regions"
  command :info => Rudy::CLI::Info

  # about "Log in to a machine"
  # command :ssh => Rudy::CLI::Machines

  # about "Check Rudy configuration."
  # usage "rudy [-f config-file] config [param-name]"
  # option :l, :all, "Display all configs for all machines"
  # option :commands, "Display commands configuration"
  # option :defaults, "Display defaults configuration"
  # option :machines, "Display machines configuration"
  # option :routines, "Display routines configuration"
  # option :script, "Output configuration identical to what is provided to scripts called in routines"
  # option :project, "Output a skeleton Rudyfile"
  # option :d, :defaults, "Display the default value for the supplied parameter"
  # option :g, :group, String, "Display configuration for a specific group"
  # argv :name
  # command :config => Rudy::CLI::Config
  # command_alias :config, :configs

  about "Initialize Rudy configuration"
  command :init do |obj|

    unless File.exists? Rudy::CONFIG_FILE
      Rudy::Config.init_config_dir
    end

    begin

      # Check redis connection

    rescue => ex
      exit 1
    end

    obj.global.quiet = true  # don't print elapsed time
  end

  about "Display time (in UTC)"
  option :l, :local, "Display local time"
  command :time do |obj|
    t = obj.option.local ? Time.now : Time.now.utc
    puts '%s' % t.strftime("%Y-%m-%d %T %Z (%z)")
  end

  usage "rudy [global options] annoy [-h -m -l] [-e]"
  about "Play around with Rudy's annoying challenges"
  option :s, :string, "A numeric challenge"
  option :n, :numeric, "A numeric challenge"
  option :i, :insane, "Insane annoyance factor"
  option :h, :high, "High annoyance factor"
  option :m, :medium, "Medium annoyance factor"
  option :l, :low, "Low annoyance factor"
  option :r, :rand, "Random challenge type"
  command :annoy do |obj|
    srand(Time.now.to_f)
    flavor = [:numeric, :string, :rand].detect { |v| obj.option.send(v) } || :string
    factor = [:insane, :high, :medium, :low].detect { |v| obj.option.send(v) } || :medium
    success = Annoy.challenge?("Is this annoying?", factor, flavor)
    puts (success ? "Correct!" : "WRONG!").bright
    obj.global.quiet = true  # don't print elapsed time
  end

  about "Display the current Rudy slogan"
  command :slogan do |obj|
    puts "Rudy: Not your grandparent's deployment tool!"
    obj.global.quiet = true  # don't print elapsed time
  end

  about "Generates a configuration template to #{Rudy::CONFIG_FILE}"
  command :generate_config do |obj|
    unless File.exists?(Rudy::CONFIG_FILE)
      Rudy::Config.init_config_dir
      puts "Add your AWS credentials to #{Rudy::CONFIG_FILE}"
    else
      puts "#{Rudy::CONFIG_FILE} already exists"
    end
  end

  about "Display basic system information"
  command :sysinfo do
    puts Rudy.sysinfo.to_yaml
  end
end

begin
  Drydock.run!(ARGV, STDIN) if Drydock.run? && !Drydock.has_run?
rescue Drydock::ArgError, Drydock::OptError => ex
  STDERR.puts ex.message
  STDERR.puts ex.usage
rescue Drydock::InvalidArgument => ex
  STDERR.puts ex.message
# rescue Rudy::Error => ex
#   STDERR.puts ex.message
#   STDERR.puts ex.backtrace if Drydock.debug?
rescue Interrupt
  puts "#{$/}Exiting... "
  exit 1
rescue => ex
  STDERR.puts "ERROR (#{ex.class.to_s}): #{ex.message}"
  STDERR.puts ex.backtrace if Drydock.debug?
end
